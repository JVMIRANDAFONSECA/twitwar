{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","components/Profile.js","components/TrendList.js","components/LoginScreen.js","components/ChatRoom.js","components/Main.js","App.js","serviceWorker.js","utils/history.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","NavBar","class","className","onClick","Profile","name","TrendList","props","handleClickAgree","lobby","polarity","setOpinion","fetch","then","res","json","result","log","setState","isLoaded","room","setRoom","state","handleClickDisagree","this","trends","username","trendList","map","trend","key","id","tweet_volume","trim","opinion","Component","LoginScreen","onLoginAttempt","domain","client_id","auth0","redirect_uri","handleChange","bind","handleSubmit","event","target","setUsername","preventDefault","onSubmit","type","onChange","ChatRoom","onMessageReceive","msg","topic","tbMsg","author","sender","message","content","prevState","messages","sendMessage","selfMsg","snMsg","clientRef","JSON","stringify","e","handleExit","method","handleClick","clientConnected","addEventListener","currentUserId","randomUserId","currentUser","randomUserName","onSendMessage","connected","url","topics","onMessage","ref","client","onConnect","onDisconnect","debug","Main","setHasClickedOpinion","boolean","hasClickedOpinion","setLobby","trendName","setPolarity","number","App","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","config","clientId","origin","push","targetUrl","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.250c52d8.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","// src/components/NavBar.js\n\nimport React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <nav class=\"navbar navbar-light bg-light\">\n        <div>\n          {!isAuthenticated && (\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => loginWithRedirect({})}\n            >\n              Log in\n            </button>\n          )}\n          {isAuthenticated && (\n            <button className=\"btn btn-primary\" onClick={() => logout()}>\n              Log out\n            </button>\n          )}\n        </div>\n        <h6>TwitWars</h6>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","// src/components/Profile.js\n\nimport React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <h2>Welcome, {user.name}!</h2>\n    </Fragment>\n  );\n};\n \nexport default Profile;","import React from \"react\";\nimport Profile from \"./Profile\";\n\nexport default class TrendList extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  handleClickAgree = (lobby) => {\n    this.props.polarity(true);\n    this.props.lobby(lobby);\n    this.props.setOpinion(true);\n    fetch(\n      \"https://twit-war.herokuapp.com/api/room?trend=\" +\n        lobby +\n        \"&opinion=\" +\n        \"true\"\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          this.setState({\n            isLoaded: true,\n            room: result,\n          });\n          this.props.setRoom(this.state.room);\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  };\n  handleClickDisagree = (lobby) => {\n    this.props.polarity(false);\n    this.props.lobby(lobby);\n    this.props.setOpinion(true);\n    fetch(\n      \"https://twit-war.herokuapp.com/api/room?trend=\" +\n        lobby +\n        \"&opinion=\" +\n        \"false\"\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          console.log(result);\n          this.setState({\n            isLoaded: true,\n            room: result,\n          });\n          this.props.setRoom(this.state.room);\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  };\n  render() {\n    const { trends, username } = this.props\n    const trendList = trends.map((trend) => {\n      return (\n        <div className=\"trendContainer my-5\" key={trend.id}>\n          <div>\n            <h5>{trend.name}</h5>\n            {trend.tweet_volume ? <p className=\"text-muted\">{trend.tweet_volume} tweets</p> : null}\n          </div>\n          <div className=\"buttonContainer\">\n            <button\n              className=\"btn btn-success m-2\"\n              onClick={() => {\n                this.handleClickAgree(trend.name);\n              }}\n            >\n              Agree\n            </button>\n            <button\n              className=\"btn btn-danger  m-2\"\n              onClick={() => {\n                this.handleClickDisagree(trend.name);\n              }}\n            >\n              Disagree\n            </button>\n          </div>\n        </div>\n      );\n    });\n    return username.trim() && !this.props.opinion ? (\n      <div className=\"container\">\n        <div className=\"jumbotron\">\n          <Profile />\n          {trendList}\n        </div>\n      </div>\n    ) : null;\n  }\n}\n","import React from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nexport default class LoginScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  onLoginAttempt = async () => {\n    const auth0 = await createAuth0Client({\n      domain: \"twitwar.eu.auth0.com\",\n      client_id: \"g7vWpCLneLdOPUeRx5KHeskBEwbcPQUa\",\n    });\n    await auth0.loginWithRedirect({\n      redirect_uri: \"https://ojaoc.github.io/hackertrollerz-ui/\",\n    });\n    //logged in. you can get the user profile like this:\n    //const user = await auth0.getUser();\n    console.log(auth0);\n    //this.props.setUsername(user.username);\n  };\n\n  handleChange(event) {\n    this.setState({ username: event.target.value });\n  }\n\n  handleSubmit(event) {\n    //alert(\"A name was submitted: \" + this.state.username);\n    this.props.setUsername(this.state.username);\n    event.preventDefault();\n  }\n\n  render() {\n    return !this.props.username.trim() ? (\n      <div className=\"jumbotron centered\">\n        <div className=\"form-group\">\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-group\">\n              <label className=\"p-2\">\n                Username:\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  value={this.state.username}\n                  onChange={this.handleChange}\n                />\n              </label>\n              <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary\" />\n            </div>\n          </form>\n        </div>\n      </div>\n    ) : null;\n  }\n}\n","import React from \"react\";\nimport SockJsClient from \"react-stomp\";\nimport { TalkBox } from \"react-talk\";\n\n/*export default class ChatRoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleSubmit(event) {\n    //alert(\"A name was submitted: \" + this.state.username);\n    this.sendMessage(event.target.value);\n    event.preventDefault();\n  }\n  sendMessage = (msg) => {\n    this.clientRef.sendMessage(\"/trend/lobby\", msg);\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Message:\n            <input type=\"text\" />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <SockJsClient\n          url=\"http://localhost:8080/ws\"\n          topics={[\"/trend/lobby\"]}\n          onMessage={(msg) => {\n            console.log(msg);\n          }}\n          ref={(client) => {\n            this.clientRef = client;\n          }}\n        />\n      </div>\n    );\n  }\n}*/\n\nexport default class ChatRoom extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      clientConnected: false,\n      messages: [],\n      room: null,\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", () => this.handleExit());\n }\n\n  onMessageReceive = (msg, topic) => {\n    let tbMsg = {\n      author: msg.sender,\n      message: msg.content,\n    };\n    this.setState((prevState) => ({\n      messages: [...prevState.messages, tbMsg],\n    }));\n  };\n\n  sendMessage = (msg, selfMsg) => {\n    try {\n      let snMsg = {\n        sender: this.props.username,\n        content: selfMsg.message,\n        type: \"CHAT\",\n      };\n      console.log(snMsg);\n      this.clientRef.sendMessage(\n        \"/trend/\" + this.props.room,\n        JSON.stringify(snMsg)\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  handleExit = () => {\n      fetch(\"https://twit-war.herokuapp.com/api/leave?roomId=\" + this.props.room + \"&trend=\" + this.props.lobby, {\n          method: 'POST'\n      });\n  }\n\n  handleClick = () => {\n      this.props.setOpinion(false);\n      this.handleExit();\n  }\n\n  render() {\n    const wsSourceUrl = \"https://twit-war.herokuapp.com/ws\";\n    return this.props.opinion ? (\n      <div className=\"jumbotron centered\">\n        <div>\n          <TalkBox\n            topic={this.props.lobby}\n            currentUserId={this.randomUserId}\n            currentUser={this.randomUserName}\n            messages={this.state.messages}\n            onSendMessage={this.sendMessage}\n            connected={this.state.clientConnected}\n          />\n\n          <SockJsClient\n            url={wsSourceUrl}\n            topics={[\"/trend/\" + this.props.room]}\n            onMessage={this.onMessageReceive}\n            ref={(client) => {\n              this.clientRef = client;\n            }}\n            onConnect={() => {\n              this.setState({ clientConnected: true });\n            }}\n            onDisconnect={() => {\n              this.setState({ clientConnected: false });\n            }}\n            debug={false}\n          />\n          <button className=\"btn btn-primary\" onClick={this.handleClick}>Exit</button>\n        </div>\n      </div>\n    ) : null;\n  }\n}\n","import React from \"react\";\nimport TrendList from \"./TrendList\";\nimport LoginScreen from \"./LoginScreen\";\nimport ChatRoom from \"./ChatRoom\";\nimport Profile from \"./Profile\";\n\nexport default class Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      error: null,\n      isLoaded: false,\n      trends: [],\n      hasClickedOpinion: false,\n      lobby: \"\",\n      polarity: null,\n      room: null,\n    };\n  }\n  componentDidMount() {\n    let token =\n      \"AAAAAAAAAAAAAAAAAAAAAC2uDwEAAAAAuUTw%2FQnHL9lqek0ODTp64ROuGBU%3D7fwFkHZVgPMjz3FdOVhZlsE7idVKtyI2kJj6zofXQx8JduNHvh\";\n    fetch(\"https://twit-war.herokuapp.com/api/trends?bt=\" + token)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            trends: result[0].trends,\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n  }\n  setUser = (username) => {\n    this.setState({ username: username });\n  };\n  setHasClickedOpinion = (boolean) => {\n    this.setState({ hasClickedOpinion: boolean });\n  };\n  setLobby = (trendName) => {\n    this.setState({ lobby: trendName });\n  };\n  setPolarity = (boolean) => {\n    this.setState({ polarity: boolean });\n  };\n  setRoom = (number) => {\n    this.setState({ room: number });\n  };\n  render() {\n    const { error, isLoaded, trends } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      console.log(this.state.trends);\n      return (\n        <>\n          <LoginScreen\n            setUsername={this.setUser}\n            username={this.state.username}\n          />\n          <TrendList\n            trends={this.state.trends}\n            username={this.state.username}\n            setOpinion={this.setHasClickedOpinion}\n            opinion={this.state.hasClickedOpinion}\n            polarity={this.setPolarity}\n            lobby={this.setLobby}\n            setRoom={this.setRoom}\n          />\n          <ChatRoom\n            username={this.state.username}\n            setOpinion={this.setHasClickedOpinion}\n            opinion={this.state.hasClickedOpinion}\n            polarity={this.state.polarity}\n            lobby={this.state.lobby}\n            room={this.state.room}\n          />\n        </>\n      );\n    }\n  }\n  /*return (\n      <div className=\"container\">\n        <LoginScreen\n          setUsername={this.setUser}\n          username={this.state.username}\n        />\n        <TrendList trends={this.state.trends} username={this.state.username} />\n      </div>\n    );*\n    /*return (\n        <div className=\"container\">\n            <ChatRoom />\n        </div>\n    )*/\n}\n","// src/App.js\n\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Main from \"./components/Main\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <NavBar />\n        <Main />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// src/utils/history.js\n\nimport { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}